from aiogram import Router
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from aiogram.types import LinkPreviewOptions, Message

from telegram_bot import start_bot, telegram_group_id, bot

from database import DatabaseConnection, NewsRepository
import logging

router = Router()


async def tg_bot():
    await start_bot()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¢–µ–ª–µ–≥—Ä–∞–º
async def send_news_to_telegram(new_news, connection):
    mark_news = NewsRepository(connection)
    list_id = []
    for id_news, title, date_time, desc, url, url_img, category in sorted(new_news):
        options = LinkPreviewOptions(
            url=url,
            prefer_small_media=True)
        message = (f'‚ö°Ô∏è{hbold(title)}\n\n'
                   f'üí¨{desc}\n\n')
        await bot.send_message(telegram_group_id, text=message, link_preview_options=options)
        list_id.append(id_news)

    mark_news.mark_news_as_sent(list_id)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
async def send_news():
    try:
        connection = DatabaseConnection()

        unread = NewsRepository(connection)
        if connection:
            # –î–æ—Å—Ç–∞–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram
            unread_news = unread.get_unread_news()

            if unread_news:
                await send_news_to_telegram(unread_news, connection)

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
            connection.close_db()
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {error}')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/news' –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
@router.message(Command('news'))
async def news_handler(message: Message):
    await send_news()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–π –ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å
@router.message()
async def echo_handler(message: Message):
    await message.answer(f'–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç')
